(1) Java, console init throw error

		//FIXME:
0xffffffffL & (long)---->		long h = ((long)l) & 0xffffffffL; // seed  - (uint) - uint - int
		int step = (l >> 5) + 1; // if string is too long, don't hash all its chars  - uint
		int l1; //uint
		for (l1 = l; l1 >= step; l1 -= step) {
			//FIXME:
			// compute hash 
0xffffffffL & (long)---->		h = (0xffffffffL) & ((long)(h ^ ((h << 5)+(h >> 2) + (byte)str.get(l1 - 1))));
		}
		
		
(2) Java, execute 'return 0'

	public static TValue luaH_getnum(Table t, int key) {
		// (1 <= key && key <= t.sizearray) 
---->		if ((long)((key - 1) & 0xffffffff) < (long)(t.sizearray & 0xffffffff)) { //uint - uint
			return t.array[key - 1];
		}
		
		
	public static TValue luaH_getnum(Table t, int key) {
		// (1 <= key && key <= t.sizearray) 
		if ((long)(((long)(key - 1)) & 0xffffffffL) < (long)(((long)t.sizearray) & 0xffffffffL)) { //uint - uint
			return t.array[key - 1];
		}
		
		
(3) 
lua_CFunction delegate string compare

(4)

	public static class TKey
	{
		public LuaObject.TKey_nk nk = new LuaObject.TKey_nk(); //<-------not need
		
		public TKey()
		{
			this.nk = new LuaObject.TKey_nk();
		}
		
(5)
	
		public class Token
		{
			public int token;
			public LuaLex.SemInfo seminfo = new LuaLex.SemInfo(); //<------------move below
			
			public Token()
			{
				
			}
			
			public Token(Token copy)
			{
				this.token = copy.token;
				this.seminfo = new LuaLex.SemInfo(copy.seminfo);
			}
		}
		
(6)
LuaProgram.Smain and LuacProgram.Smain not different names



